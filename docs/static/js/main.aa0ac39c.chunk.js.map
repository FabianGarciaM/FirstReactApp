{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategorys","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categorys","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAKaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAAkB,EAEPC,mBAAS,IAFF,mBAEpCC,EAFoC,KAExBC,EAFwB,KAsB3C,OACI,sBAAMC,SAdU,SAACC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,GAG1BR,GAAa,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,KAEdO,QAAQC,IAAI,kEAMhB,SACI,uBACIC,KAAK,OACLC,MAAOX,EACPY,SAvBgB,SAACT,GAEzBF,EAAcE,EAAEU,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCAPO,G,MAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE/B,OACI,sBAAKc,UAAU,+DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,SCJHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECCX,SAACA,GAAa,IAAD,EACXhB,mBAAS,CAC/BuB,KAAK,GACLa,SAAQ,IAHyB,mBAC9BC,EAD8B,KACvBC,EADuB,KAoBrC,OAbAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAd,GAEEY,EAAS,CACTf,KAAKG,EACLU,SAAQ,SAIrB,CAACpB,IAGGqB,EDhBwBI,CAAazB,GAAhCa,EALuB,EAK5BN,KAAaa,EALe,EAKfA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,sDAAd,SAAqEhB,IAGpEoB,GAAW,4CAEZ,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACd,cAAC,EAAD,eAEYA,GADHA,EAAIC,aElBpBe,EAAe,WAAM,MAEI1C,mBAAS,CAAC,SAFd,mBAEvB2C,EAFuB,KAEZ5C,EAFY,KAY9B,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,aAAcA,IAC3B,uBAEA,6BAEQ4C,EAAUlB,KAAI,SAACT,GAAD,OACV,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCpB7B4B,IAASC,OACP,cAAE,IAAMC,WAAR,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.aa0ac39c.chunk.js","sourcesContent":["import React , {useState}from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n//                          Desestructuracion de Componente Padre\r\nexport const AddCategory = ({setcategorys}) => {\r\n\r\n    const [InputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChanged = ((e)=>{\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    })\r\n\r\n    const handleSubmit=((e)=>{\r\n        e.preventDefault();//previene que el boton de submitRefresque la pagina completa\r\n        if(InputValue.trim().length > 2){\r\n            //                   ... Operador Spred para clonar un obj\r\n            // y se manda a llamar al objeto del comp padre para agregarle un valor  \r\n            setcategorys(categ => [InputValue, ...categ]);\r\n            setInputValue('');\r\n        }else{\r\n            console.log(\"No puede ser vacio el campo , por favor valida la informacion\")\r\n        }\r\n    })\r\n\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={InputValue}\r\n                onChange={handleInputChanged} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    //agregando la propiedad requerida de setCategoris\r\n    setcategorys:PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n\r\nexport const getGifs = async (category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=eHRO7YQqR4gpORWFoNs7pyCcgKDpH70V`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\nimport 'animate.css';\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInDown animate__delay-1s'>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n//desestructuramos en return del useefect y obtenemos la prop\r\n//data con el valor de la imagenes (data:img)\r\n//y el loading:loading\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__zoomIn animate__delay-1s'>{category}</h3>\r\n            {/* {loading ? 'Cargando...' : ''} */}\r\n            {/* si loading es true se muestra si es false no se muestra (if rapido) */}\r\n            {loading && <p>Loading ...</p>}\r\n\r\n            <div className='card-grid'>\r\n                {\r\n                    images.map(img => \r\n                    <GifGridItem \r\n                        key={img.id} \r\n                            {...img}/>)\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\n\r\n//custome HOOKS Â¿\r\nexport const useFetchGifs = (category) =>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true})\r\n\r\n//en este caso el useEffect avita que se ejecute una peticion de gifs cada que se\r\n//escribe en el input del formulario\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(img=>{\r\n\r\n                    setState({\r\n                    data:img,\r\n                    loading:false\r\n                    })  \r\n            }\r\n        )\r\n    }, [category])\r\n    \r\n\r\n    return state;\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n    //const categories = ['One Punch', 'Dragonball', 'Samurai X']\r\n    const [categorys, setcategorys] = useState(['Goku'])\r\n    \r\n    \r\n    // const handelAdd = ()=>{\r\n    //     //Modificando el estado inicial del COmponente\r\n           //considerar el operador spret (...), para poder agregar datos al arreglo sin borrar el estado inicial\r\n    //     //setcategorys([...categorys , 'Clarens'])\r\n    //     setcategorys(categ => [...categ, 'Clarens'] )\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GIF EXPERT APP</h2>\r\n            <AddCategory setcategorys={setcategorys}/>\r\n            <hr/>\r\n           \r\n            <ol>\r\n                {\r\n                    categorys.map((category) =>\r\n                        <GifGrid \r\n                        key={category} \r\n                        category={category} />\r\n                    )\r\n                }\r\n            </ol>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  < React.StrictMode >\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}